package simugen.core.interfaces;

import java.util.List;

import simugen.core.components.interfaces.Component;
import simugen.core.components.interfaces.Queue;
import simugen.core.components.interfaces.Server;
import simugen.core.defaults.ElementTransferEvent;

/**
 * An {@link EngineTick} is a slice in which {@link Event}s get generated. Some
 * {@link Component}s will generate multiple events if possible, Eg.
 * {@link Queue}s will generate as many {@link ElementTransferEvent}s to remove
 * as many {@link Element}s from the {@link Queue} as possible in this
 * {@link EngineTick}.<br>
 * <br>
 * {@link EngineTick}s are not defined amounts of time, and are instead
 * dependent on {@link Component}s' ability to generate {@link Event}s, as such
 * the defined time for an {@link EngineTick} is the earliest {@link Event}
 * generated by all {@link Component}s.
 * 
 * @author Lorelei
 *
 */
public interface EngineTick
{
	/**
	 * Get the next random number from the {@link Engine}.<br>
	 * <br>
	 * Used to generate random variates from DataGenerators.
	 * 
	 * @return
	 */
	public double getNextRand();

	/**
	 * Gets the time at which the event should fire, based on the current time
	 * of the engine.<br>
	 * <br>
	 * The duration gets saved as the new time for the {@link Engine} once the
	 * {@link EngineTick} is done. <i>Only update the new event if the duration
	 * is longer than the previous event's duration. <b>(I am unsure if this is
	 * a valid statement)</b></i>
	 * 
	 * @param duration
	 *            The duration in milliseconds that this {@link Event} took. Eg.
	 *            The time at which an {@link Element} was at a {@link Server}
	 * @return The time in milliseconds for this {@link Event}, in {@link Model}
	 *         time.
	 */
	public long getEventTime(long duration);

	/**
	 * @param event
	 *            The {@link Event} to add to the {@link EngineTick}, to be
	 *            processed by the {@link Engine}.
	 */
	public void addEvent(Event event);

	/**
	 * @param listEvents
	 *            All of the {@link Event}s to add to the list in this
	 *            {@link EngineTick}.
	 */
	public void addAllEvents(List<Event> listEvents);

	/**
	 * @return The list of Events for this {@link EngineTick}. Intended to be
	 *         called by the {@link Engine}.
	 */
	public List<Event> getEvents();

	/**
	 * @param milliseconds
	 *            The current time in milliseconds, of the {@link Engine}.
	 */
	public void setCurrentTime(long milliseconds);
}
